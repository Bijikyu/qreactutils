// Toast notification system with automatic queue management
// Implements reducer pattern for predictable state management and optimal performance
// Designed for single toast display to avoid overwhelming users with multiple notifications
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

// Limit to single toast to maintain clean UI and prevent notification spam
// Multiple toasts can overwhelm users and degrade experience in automation workflows
const TOAST_LIMIT = 1
// Typical delay keeps toast visible long enough for user feedback without clutter
const TOAST_REMOVE_DELAY = 8000 // 8s visibility duration for most notifications

// Extended toast interface with additional fields for rich notifications
// Supports React nodes for flexible content rendering including icons and actions
type ToasterToast = ToastProps & {
  id: string // Unique identifier for state management and removal tracking
  title?: React.ReactNode // Primary message - supports JSX for rich content
  description?: React.ReactNode // Secondary details - supports multiline text
  action?: ToastActionElement // Optional action button for user interaction
}

// Action type constants for reducer pattern implementation
// String literals provide better debugging and type safety than enums
const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST", 
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

// Simple counter for unique ID generation without external dependencies
// Modulo prevents integer overflow while maintaining uniqueness for session
let count = 0

/**
 * Generates unique toast identifiers without requiring UUID library
 * Uses simple counter with overflow protection for session-scoped uniqueness
 * @returns string representation of unique identifier
 */
function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER // Prevent overflow while maintaining uniqueness
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

// Global timeout tracking to prevent memory leaks and duplicate removals
// Map structure allows efficient timeout management for multiple toasts
const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

/**
 * Queues toast for automatic removal after configured delay
 * Prevents duplicate timeout creation and manages cleanup efficiently
 * @param toastId - Unique identifier of toast to remove
 */
const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return // Prevent duplicate timeout creation for same toast
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId) // Clean up timeout reference to prevent memory leaks
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout) // Track timeout for potential cleanup
}

/**
 * Toast state reducer implementing immutable state updates
 * Handles all toast lifecycle events with predictable state transitions
 * @param state - Current toast state
 * @param action - Action to process
 * @returns New state after action processing
 */
export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        // Prepend new toast and enforce limit to prevent UI overflow
        // slice(0, TOAST_LIMIT) ensures only most recent toasts are kept
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        // Immutable update of specific toast while preserving others
        // Useful for updating progress or changing toast content dynamically
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // Side effect: Queue toasts for removal after animation completes
      // Kept in reducer for simplicity despite architectural purity concerns
      // Alternative would require separate effect system
      if (toastId) {
        addToRemoveQueue(toastId) // Dismiss specific toast
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id) // Dismiss all toasts
        })
      }

      return {
        ...state,
        // Mark toasts as closed to trigger exit animations
        // Actual removal happens later via REMOVE_TOAST action
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false, // Trigger close animation
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [], // Clear all toasts for reset scenarios
        }
      }
      return {
        ...state,
        // Remove specific toast from state after animation completes
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

// Global listener array for state subscription pattern
// Allows multiple components to receive toast state updates without Context API overhead
const listeners: Array<(state: State) => void> = []

// In-memory state storage for toast system
// Persists across component unmounts and provides immediate state access
let memoryState: State = { toasts: [] }

/**
 * Dispatches actions to update toast state and notify all listeners
 * Implements observer pattern for efficient state propagation
 * @param action - Action to process and broadcast
 */
function dispatch(action: Action) {
  memoryState = reducer(memoryState, action) // Update central state
  listeners.forEach((listener) => {
    listener(memoryState) // Notify all subscribed components
  })
}

// Toast creation interface omitting auto-generated ID field
// Provides clean API for toast creation without implementation details
type Toast = Omit<ToasterToast, "id">

/**
 * Creates and displays a new toast notification
 * Returns control functions for programmatic toast management
 * @param props - Toast configuration without ID
 * @returns Object with toast control functions
 */
function toast({ ...props }: Toast) {
  const id = genId() // Generate unique identifier for this toast

  // Create scoped update function for this specific toast
  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  // Create scoped dismiss function for this specific toast
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true, // Initialize as visible
      onOpenChange: (open) => {
        if (!open) dismiss() // Auto-dismiss when UI closes toast
      },
    },
  })

  setTimeout(() => dismiss(), TOAST_REMOVE_DELAY) // Auto-dismiss after delay

  return {
    id: id,
    dismiss, // Manual dismissal function
    update,  // Dynamic content update function
  }
}

/**
 * React hook providing toast state and control functions
 * Subscribes to global toast state and provides toast management API
 * @returns Object with current toast state and control functions
 */
function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState) // Subscribe to state updates
    return () => {
      // Cleanup subscription to prevent memory leaks
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state, // Current toast state (toasts array)
    toast,    // Function to create new toasts
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }), // Function to dismiss toasts
  }
}

export { useToast, toast }