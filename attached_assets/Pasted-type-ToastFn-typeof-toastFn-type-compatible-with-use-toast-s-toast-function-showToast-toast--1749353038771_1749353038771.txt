type ToastFn = typeof toastFn //(type compatible with use-toast's toast)

function showToast(toast: ToastFn, message: string, title: string, variant?: 'default' | 'destructive' | null) { //(typed variant for toast)
  console.log(`showToast is running with ${message}`) //(trace start with message)
  try {
    const result = toast({ title: title, description: message, variant: variant }) //(invoke toast with optional variant)
    console.log(`showToast is returning ${JSON.stringify(result)}`) //(log result before return)
    return result
  } catch (err) {
    console.log(`showToast has run resulting in a final value of failure`) //(trace failure)
    throw err
  }
}

function toastError(toast: ToastFn, message: string, title = `Error`) {
  console.log(`toastError is running with ${message}`)
  try {
    const result = showToast(toast, message, title, `destructive`) //(delegate to showToast with destructive variant)
    console.log(`toastError is returning ${JSON.stringify(result)}`)
    return result
  } catch (err) {
    console.log(`toastError has run resulting in a final value of failure`)
    throw err
  }
}

function toastSuccess(toast: ToastFn, message: string, title = `Success`) {
  console.log(`toastSuccess is running with ${message}`)
  try {
    const result = showToast(toast, message, title) //(delegate to showToast without variant)
    console.log(`toastSuccess is returning ${JSON.stringify(result)}`)
    return result
  } catch (err) {
    console.log(`toastSuccess has run resulting in a final value of failure`)
    throw err
  }
}

function stopEvent(e: React.SyntheticEvent) { //(centralized preventDefault + stopPropagation helper)
  console.log(`stopEvent is running with ${e.type}`) //(trace event type)
  try {
    e.preventDefault() //(cancel default action)
    e.stopPropagation() //(halt event bubbling)
    console.log(`stopEvent has run resulting in a final value of undefined`) //(trace end with no return)
  } catch (err) {
    console.log(`stopEvent has run resulting in a final value of failure`) //(trace failure for debug)
    throw err
  }