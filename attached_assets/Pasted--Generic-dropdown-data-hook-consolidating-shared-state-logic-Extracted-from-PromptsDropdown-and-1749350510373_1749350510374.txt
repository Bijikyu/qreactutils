// Generic dropdown data hook consolidating shared state logic
// Extracted from PromptsDropdown and use-credentials so components stay focused
// Accepts a fetch function and toast instance to load dropdown options on demand
function useDropdownData<T>(fetcher: () => Promise<T[]>, toast: typeof toastFn) {
  console.log(`useDropdownData is running with fetcher`); // (log start of hook)
  const [items, setItems] = useState<T[]>([]); // (state for dropdown options)
  const [isLoading, setIsLoading] = useState(false); // (state for loading indicator)
  const { user } = useAuth(); // (obtain auth user to trigger fetch when available)

  async function fetchData() {
    console.log(`fetchData is running with no params`); // (log start of data fetch)
    try {
      setIsLoading(true); // (enter loading state)
      const data = await fetcher(); // (call provided fetch function)
      console.log(`fetchData is returning ${JSON.stringify(data)}`); // (log data results)
      setItems(data); // (store fetched dropdown options)
    } catch (error) {
      console.error('fetchData error:', error); // (log fetch failure)
      toastError(toast, `Failed to load data.`); // (show error toast)
    } finally {
      setIsLoading(false); // (exit loading state)
    }
  }

  useEffect(() => {
    if (user) {
      fetchData(); // (auto load when user state changes)
    }
  }, [user]);

  console.log(`useDropdownData is returning ${JSON.stringify({ items, isLoading })}`); // (log return state)
  return { items, isLoading, fetchData }; // (expose dropdown data and loader)
}

// Factory producing typed hooks that delegate to useDropdownData
function createDropdownListHook<T>(fetcher: () => Promise<T[]>) {
  console.log(`createDropdownListHook is running with fetcher`); // (log start of factory)
  function useList(toast: typeof toastFn) {
    console.log(`useList is running with no params`); // (log start of generated hook)
    const result = useDropdownData<T>(fetcher, toast); // (call generic dropdown logic)
    console.log(`useList is returning ${JSON.stringify(result)}`); // (log hook return value)
    return result; // (return dropdown state)
  }
  console.log(`createDropdownListHook is returning ${useList}`); // (log factory return)
  return useList; // (expose generated hook)